import java.math.BigInteger; 
import java.nio.charset.StandardCharsets; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 
public class MD5 { 
        public static String toHexString(byte[] hash) { 
        BigInteger number = new BigInteger(1, hash); 
        StringBuilder hexString = new StringBuilder(number.toString(16)); 
        while (hexString.length() > 32) { 
            hexString.insert(0, '0'); 
        } 
        return hexString.toString(); } 
    public static void main(String args[])throws NoSuchAlgorithmException 
    { 
        System.out.println("Hashcode Generated by MD5 for:"); 
            String s1= "Information and security"; 
            MessageDigest md=MessageDigest.getInstance("MD5"); 
            byte[] hash=md.digest(s1.getBytes(StandardCharsets.UTF_8)); 
            System.out.println("Message Digest: "+s1+":"+toHexString(hash)); 
      }}
======================================================================================================\
import hashlib 
result=hashlib.md5(b'good') 
result=result.hexdigest() 
print('Message Digest', result) 
========================================================================================================
import hashlib 
str = input('Enter String to encode :') 
result = hashlib.sha1(str.encode()) 
result = result.hexdigest() 
print("Output of SHA1 ", result) 
========================================================================================================
!pip install pycryptodome

from Crypto.Signature import PKCS1_v1_5 
from Crypto.Hash import SHA256 
from Crypto.PublicKey import RSA 
from Crypto import Random 
def generate_signature(private_key,message): 
    key = RSA.importKey(private_key) 
    hashed_message = SHA256.new(message.encode('utf-8')) 
    signer = PKCS1_v1_5.new(key) 
    signature = signer.sign(hashed_message) 
    return signature 
def verify_signature(public_key,message,signature): 
    key  = RSA.importKey(public_key) 
    hashed_message = SHA256.new(message.encode('utf-8')) 
    verifier = PKCS1_v1_5.new(key) 
    return verifier.verify(hashed_message,signature) 
 
random_generator = Random.new().read 
key_pair = RSA.generate(2048,random_generator) 
public_key = key_pair.publickey().export_key() 
private_key = key_pair.export_key() 
message = "Hello world!" 
signature = generate_signature(private_key, message) 
print("Generated Signature: ", signature) 
is_valid = verify_signature(public_key, message, signature) 
print("Signature Verification Result:", is_valid)